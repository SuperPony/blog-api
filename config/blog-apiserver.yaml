server:
  mode: debug #server mode: release, debug(default), test
  health: false # 是否开启健康检测，如果开启，则插入 /health 路由
  middlewares: # server global middlewares
    - recovery
    - requestid
    - cors
  max-ping-count: 3

insecure:
  host:
  port: 8080

mysql:
  # host: blog-mysql # default 127.0.0.1
  host: 127.0.0.1
  port: 3306 # default 3306
  username: root
  password: B0RItAFBBIpzboP9
  database: blog
  max-idle-connections: 100 # 最大空闲连接数
  max-open-connections: 100
  max-connection-list-time: 10s # 空闲链接最大存活时间
  log-level: 4 # GORM log level, 1 silent, 2 error, 3 warn, 4 info

redis:
  host: 127.0.0.1  # default 127.0.0.1
  port: 6379 # default 6379
  password:
  #addrs:
  #master-name: # redis 集群 master 名称
  #username: # redis 登录用户名
  #database: # redis 数据库
  #optimisation-max-idle:  # redis 连接池中的最大空闲连接数
  #optimisation-max-active: # 最大活跃连接数
  #timeout: # 连接 redis 时的超时时间
  #enable-cluster: # 是否开启集群模式
  #use-ssl: # 是否启用 TLS
  #ssl-insecure-skip-verify: # 当连接 redis 时允许使用自签名证书

feature:
  enable-metrics: true # 开启 metrics, router:  /metrics
  profiling: true # 开启性能分析, 可以通过 <host>:<port>/debug/pprof/地址查看程序栈、线程等系统信息，默认值为 true

log:
  name: apiserver # Logger的名字
  development: true # 是否是开发模式。如果是开发模式，会对DPanicLevel进行堆栈跟踪。
  level: debug # 日志级别，优先级从低到高依次为：debug, info, warn, error, dpanic, panic, fatal。
  format: json # 支持的日志输出格式，目前支持console和json两种。console其实就是text格式。
  enable-color: false # 是否开启颜色输出，true:是，false:否
  disable-caller: false # 是否开启 caller，如果开启会在日志中显示调用日志所在的文件、函数和行号
  output-paths: # 支持输出到多个输出。支持输出到标准输出（stdout）和文件。
    - ./log/api-server.log
    - stdout
  error-output-paths: # zap内部(非业务)错误日志输出路径，多个输出
    - ./log/api-server-error.log
  rolling: true # 是否开启日志轮转
  rolling-max-size: 10 # 单个日志文件最大限制，单位 MB
  rolling-max-age: 30 # 日志保留天数，0 表示永久保存
  rolling-max-backups: 0 # 保留旧日志文件最大个数，0表示不限制
  rolling-local-time: true # 是否启用本地时区， 默认为 UTC 时区
  rolling-compress: false # 是否启用日志压缩

validator:
  language: zh # 验证器默认语言
  tag: label # 验证器字段默认标签